nohup: ignoring input
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa9bf49ac20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
Training time measures: 2217.36852396 3842.1352338790894
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8dffe54c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1627.9744045050002 2783.9282364845276
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd32f982c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
Training time measures: 3602.58330685 6708.865953207016
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb752528cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1874.5391305580001 3218.5902757644653
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe8cf2bbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
Training time measures: 2025.041068077 3539.892398118973
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5a75149cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
Training time measures: 4564.943336444 8906.193981170654
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f77d21d8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
Training time measures: 2690.622024361 5763.4917731285095
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0a297f2c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
Training time measures: 1568.270365783 2885.7606253623962
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f268dc45cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.6min
Training time measures: 4512.652909062 8417.70457291603
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f948b467c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
Training time measures: 2158.168903923 3918.873070716858
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f653a449c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
Training time measures: 1613.082302047 2938.697165250778
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe66ce9fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
Training time measures: 3449.00854692 6507.426629781723
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f23842f2cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
Training time measures: 1853.545672737 3300.5044951438904
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f27d0671c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
Training time measures: 1979.11300448 3773.3257265090942
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb72acb8cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.4min
Training time measures: 4502.977752405 8414.57336807251
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5d4d171c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
Training time measures: 2705.448519022 4908.483004331589
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe7065aec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1552.6014995669998 2690.8826529979706
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f063cb84cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.1min
Training time measures: 4409.300342024 8771.58747291565
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7efc51c56c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
Training time measures: 2189.752909667 3819.9001421928406
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8df70dbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
Training time measures: 1596.042785647 2559.1082701683044
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f130865ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.3min
Training time measures: 3608.40737971 6489.732972860336
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f808ed40cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
Training time measures: 1953.054246177 3438.5439491271973
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcf8f704c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
Training time measures: 1975.1214067600001 3592.597916841507
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fc5c4192cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 8.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
Training time measures: 4579.353373413001 8699.62505197525
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f4363e6dc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.2min
Training time measures: 2625.9986616769997 6029.14315700531
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa709fd4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
Training time measures: 1619.4638253199998 2889.569060087204
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd123f3fcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
Training time measures: 4440.253070162 8417.356572628021
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8dd97dfc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
Training time measures: 2147.4946581090003 4827.793236732483
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f550dd1dc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
Training time measures: 1620.00307903 2901.20698928833
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7faac9ba7c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
Training time measures: 3527.422761862 6367.9953083992
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fef20130cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
Training time measures: 1887.7394281910001 4203.012576580048
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcc7fa0fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
Training time measures: 1991.0634138120001 4368.013693571091
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcd7e073cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 7.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 7.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 7.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 7.6min
Training time measures: 4449.179455428 10454.821588516235
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f2bf9a86c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
Training time measures: 2697.6726525130002 5597.276631593704
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f09cc04cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  60.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
Training time measures: 1638.503298098 3113.7200660705566
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8dece52cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 7.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.4min
Training time measures: 4596.256695844 9583.725536584854
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f875b744c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
Training time measures: 2160.503435446 4242.974938869476
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f7d56831c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
Training time measures: 1663.32258981 3169.596561908722
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f95d5a45c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.7min
Training time measures: 3591.6658042840004 7371.799076557159
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7faeadb17cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
Training time measures: 2005.388754071 3918.175014734268
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fbd444c5c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
Training time measures: 2007.585079126 3953.9794924259186
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f260bef9cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
Training time measures: 4533.688255687 9392.859416484833
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f2bc9a7ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
Training time measures: 2725.6815442 5490.11798119545
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f519fccfc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
Training time measures: 1631.1523051719998 3111.506504535675
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=16850,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f021491ecb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
Training time measures: 4593.821331843 9553.637716770172
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_16850
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fbadc988c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
Training time measures: 2154.446796683 4234.773188829422
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f77fa7f1c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
Training time measures: 1640.496733422 3118.497454881668
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcc364f7c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
Training time measures: 3587.51879455 7303.5551652908325
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8d75b8fcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
Training time measures: 1874.874889356 3549.428777217865
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8d05e1bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
Training time measures: 1992.938122539 3855.4610126018524
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f3680a90cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.9min
Training time measures: 4416.589278984 8951.804221391678
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcd0ae09c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
Training time measures: 2635.98804504 5160.400495290756
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb9969cac20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
Training time measures: 1626.2083468950002 3012.504191160202
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=29910,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f6bf11fecb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.9min
Training time measures: 4263.240651059 8751.414840221405
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_29910
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fc8e7ebfc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
Training time measures: 2090.678768145 4049.827164173126
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f1d84e99c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
Training time measures: 1612.6504381729999 3001.5207903385162
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe5ab902c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
Training time measures: 3517.623928916 3688.872397184372
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f370e84bcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  13.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.9s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.0s
Training time measures: 1862.110058493 1810.2374968528748
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f9a9c2cdc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.7s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.7s
Training time measures: 2017.8611132620001 1827.3268074989319
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd914e46cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
Training time measures: 4690.172441925 4987.17395401001
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fbdc1112c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.2s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
Training time measures: 2722.123388536 2768.578312397003
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f4324c10c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  16.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.2s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.5s
Training time measures: 1618.021297973 1506.5148973464966
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=4426,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f1031253cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
Training time measures: 4500.2862891059995 4940.75709104538
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_4426
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f2bb6ad8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.4s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
Training time measures: 2193.7824526930003 1998.8422830104828
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7febf4814c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  15.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.7s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.2s
Training time measures: 1619.094083309 1433.3285632133484
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fae04ccec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
Training time measures: 3577.824411929 3632.2291815280914
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f571bd8fcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.6s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.2s
Training time measures: 1849.5588290439998 1688.6349079608917
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5df7427c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.2s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
Training time measures: 1594.6404521000002 1082.522117137909
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f80a6c72cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   8.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   6.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   6.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
Training time measures: 2997.059239904 2458.326734304428
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f35cfdbcc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.6s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.2s
Training time measures: 2003.107165426 1471.786453485489
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa67d597c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.2s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.1s
Training time measures: 1367.8241972990002 862.1847443580627
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=21962,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f670d6cccb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
Training time measures: 3096.2677839850003 2576.0975387096405
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_21962
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5b13902c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.4s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.5s
Training time measures: 1722.612033406 1202.630973815918
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5bb2151c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  16.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.6s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.4s
Training time measures: 1366.583463446 861.2929158210754
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0383227c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
Training time measures: 2517.445452046 1999.445110321045
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb82a915cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.7s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
Training time measures: 1549.095749788 1031.7796969413757
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcfb62aac20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.7s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.9s
Training time measures: 1623.160655492 1091.4774811267853
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f979ad4dcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.2s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
Training time measures: 3251.8446422839997 2735.0585470199585
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f7d0485bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.8s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.0s
Training time measures: 1968.588891033 1453.3963866233826
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe60d340c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  11.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  12.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  17.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.4s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.5s
Training time measures: 1349.313842507 835.1707196235657
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=14423,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5f09692cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   6.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.8s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
Training time measures: 3124.6482026060003 2605.788404941559
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_14423
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0a122bec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.8s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.7s
Training time measures: 1751.701356857 1218.855882883072
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe9bf29bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  12.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.8s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.2s
Training time measures: 1350.488697276 844.9608294963837
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f6b96666c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.4s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
Training time measures: 2464.320547796 1961.2154695987701
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe5b077ccb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.3s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
Training time measures: 1540.886935719 1017.7693791389465
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0957f22c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.3s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.9s
Training time measures: 1604.3155523350001 1073.5045964717865
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd719644cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.1s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
Training time measures: 3138.677057807 2623.9426436424255
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f6ccaf24c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.5s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.6s
Training time measures: 2041.339659739 1520.1676805019379
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe93e9f7c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  15.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  16.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  21.7s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.1s
Training time measures: 1349.9101749229999 834.9632263183594
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_28020
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=28020,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f3d599b6cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.6s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
Training time measures: 3128.3432606220003 2625.1301991939545
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_28020
learners: ['EPLEXRegressor']
dataset directory: ../filtered_black_box_datasets
found 19 datasets
skipped 0 jobs with results. Override with --noskips.
skipped 0 jobs without results. Override with --noskips.
skipped 0 queued jobs. Override with --noskips.
submitting 90 jobs...
Finished submitting 90 jobs.
