nohup: ignoring input
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa9bf49ac20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
Training time measures: 2217.36852396 3842.1352338790894
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8dffe54c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1627.9744045050002 2783.9282364845276
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd32f982c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
Training time measures: 3602.58330685 6708.865953207016
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb752528cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1874.5391305580001 3218.5902757644653
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe8cf2bbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
Training time measures: 2025.041068077 3539.892398118973
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5a75149cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.4min
Training time measures: 4564.943336444 8906.193981170654
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f77d21d8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
Training time measures: 2690.622024361 5763.4917731285095
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0a297f2c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
Training time measures: 1568.270365783 2885.7606253623962
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=23654,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f268dc45cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.6min
Training time measures: 4512.652909062 8417.70457291603
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_23654
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f948b467c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
Training time measures: 2158.168903923 3918.873070716858
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f653a449c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
Training time measures: 1613.082302047 2938.697165250778
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe66ce9fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
Training time measures: 3449.00854692 6507.426629781723
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f23842f2cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
Training time measures: 1853.545672737 3300.5044951438904
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f27d0671c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
Training time measures: 1979.11300448 3773.3257265090942
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb72acb8cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.4min
Training time measures: 4502.977752405 8414.57336807251
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5d4d171c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
Training time measures: 2705.448519022 4908.483004331589
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe7065aec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
Training time measures: 1552.6014995669998 2690.8826529979706
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=15795,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin',...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f063cb84cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.1min
Training time measures: 4409.300342024 8771.58747291565
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_15795
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7efc51c56c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
Training time measures: 2189.752909667 3819.9001421928406
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8df70dbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
Training time measures: 1596.042785647 2559.1082701683044
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f130865ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.3min
Training time measures: 3608.40737971 6489.732972860336
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f808ed40cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
Training time measures: 1953.054246177 3438.5439491271973
save_file: ../results_EPLEX_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fcf8f704c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
Training time measures: 1975.1214067600001 3592.597916841507
save_file: ../results_EPLEX_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fc5c4192cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 8.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 7.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.1min
Training time measures: 4579.353373413001 8699.62505197525
save_file: ../results_EPLEX_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f4363e6dc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.2min
Training time measures: 2625.9986616769997 6029.14315700531
save_file: ../results_EPLEX_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa709fd4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
Training time measures: 1619.4638253199998 2889.569060087204
save_file: ../results_EPLEX_filtered_black_box/228_elusage//228_elusage_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=860,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd123f3fcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 5.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 6.5min
Training time measures: 4440.253070162 8417.356572628021
save_file: ../results_EPLEX_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_EPLEXRegressor_860
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f8dd97dfc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
Training time measures: 2147.4946581090003 4827.793236732483
save_file: ../results_EPLEX_filtered_black_box/663_rabe_266//663_rabe_266_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f550dd1dc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
Training time measures: 1620.00307903 2901.20698928833
save_file: ../results_EPLEX_filtered_black_box/192_vineyard//192_vineyard_EPLEXRegressor_5390
import from methods.EPLEXRegressor
algorithm: ellyn(elitism=True, g=500, islands=False, max_len=64, max_len_init=20,
      num_islands=10, pHC_on=True, prto_arch_on=True,
      selection='epsilon_lexicase', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating EPLEXRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(elitism=True, g=500, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, prto_arch_on=True,
                                    random_state=5390,
                                    selection='epsilon_lexicase',
                                    time_limit=7200),
                    n_jobs=1,
                    param_grid=[{'g': [2500],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'c...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7faac9ba7c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
Training time measures: 3527.422761862 6367.9953083992
save_file: ../results_EPLEX_filtered_black_box/519_vinnie//519_vinnie_EPLEXRegressor_5390
