nohup: ignoring input
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc36bd3cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=13.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=17.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=45.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=53.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=44.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=46.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=41.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=60.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=66.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=56.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=50.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=52.9min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=61.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=60.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=60.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=58.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=61.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=18.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.9min
Training time measures: 34521.847741355 76741.61124300957
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f389fa8fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=19.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=26.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=20.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=18.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=24.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=21.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=20.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=20.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=25.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=23.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=22.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=23.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=26.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=28.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=24.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=23.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=21.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=23.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=60.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=54.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=45.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=48.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=46.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=69.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=46.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=44.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=45.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=52.1min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=20.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=21.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=20.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=22.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=21.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=22.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=22.7min
Training time measures: 28808.867541898 71039.87980389595
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9cc8b90c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=17.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=21.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=22.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=19.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=21.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=20.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=19.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=22.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=22.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=59.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=50.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=53.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=45.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=49.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=38.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=50.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=39.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=39.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=51.0min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=18.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=19.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=20.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=17.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.2min
Training time measures: 27880.963759525002 63233.360879421234
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f81024eacb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=19.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=18.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=21.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=20.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=19.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=19.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=20.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=19.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=42.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=42.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=42.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=44.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=56.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=45.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=42.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=41.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=51.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=52.6min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=44.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=43.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=41.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=41.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=43.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=44.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=54.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=43.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=43.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=41.4min
Training time measures: 36136.127148628 77972.3480284214
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f3aafe38c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=22.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 8.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 9.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 8.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 9.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 9.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 8.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 9.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 8.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=26.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=18.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=19.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=21.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=20.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=22.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=19.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=19.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=18.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=21.3min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=19.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=19.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=21.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=21.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=19.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 8.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.3min
Training time measures: 30416.090356989 34794.328595876694
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa85eee4cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
Training time measures: 23338.30894513 23341.292257785797
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f915f382c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.5min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 18098.777292532 18100.68320798874
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f7c1a91bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
Training time measures: 19019.557419837998 19020.781720638275
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=23654),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f295e7b7cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
Training time measures: 22837.154691986998 22838.801032066345
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_23654
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f2fa83cbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 15628.220222942 15629.269438505173
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f8fa0983c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
Training time measures: 19440.244739406 19441.33043718338
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7ffb260c3c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 18335.209719876 18335.71884703636
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fe3c2ce8cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.8min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
Training time measures: 17456.920101673 17457.968519210815
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9831f14c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
Training time measures: 24426.640654399 24428.21827507019
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f057e5dbcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
Training time measures: 21835.689370411 21837.177160978317
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa70f677c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
Training time measures: 23937.887670164 23939.097932100296
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fcae4230c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
Training time measures: 18426.943824055998 18427.895636320114
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=15795),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f207e2f9cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
Training time measures: 23113.030400798998 23114.547056674957
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_15795
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f89add15c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.0min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 16246.894117332 16248.043797969818
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9a9f0dbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 7.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
Training time measures: 17382.108893475997 17383.29848074913
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1273dd4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
Training time measures: 19899.670459294997 19901.041235923767
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7efcb04cecb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
Training time measures: 15107.845071377998 15108.848235368729
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f80e0451c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
Training time measures: 17106.333400369 17107.60186123848
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa726e3ccb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
Training time measures: 21257.646150972 21259.227249860764
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fbc35c39c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.4min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 21378.619696297003 21380.16067314148
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fd38de87c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
Training time measures: 20005.270031819 20006.53133416176
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=860),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_se...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fbe6adf6cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
Training time measures: 19521.323819763 19521.905225276947
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_860
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fd2922c8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
Training time measures: 16913.847858939 16914.98924446106
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9bf9533c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
Training time measures: 18018.237913103 18019.41900897026
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f32c6f4bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
Training time measures: 21753.009216175 21754.549369335175
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc76942ccb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
Training time measures: 16014.445500001 16015.008024692535
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f20a0f87c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time= 9.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
Training time measures: 19910.027209056 19911.17425584793
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f92325e6cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
Training time measures: 22682.000325728 22683.33921957016
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7ff61d3d4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
Training time measures: 23975.809890609 23977.191379070282
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fcfaa724c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
Training time measures: 22409.513497452997 22409.858001232147
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=5390),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f729e20bcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
Training time measures: 21852.371249588 21852.826762199402
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_5390
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc901babc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
Training time measures: 16854.992848357 16861.549585819244
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f0d9cdd9c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
Training time measures: 16943.634526076 16944.32464313507
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f765095ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 21393.794768014002 21394.588723897934
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f3be9de6cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.0min
Training time measures: 18600.042737281 18600.673917770386
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc482e13c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 8.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
Training time measures: 17002.681923979002 17040.92209649086
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7efd6a77dcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 7.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
Training time measures: 20132.230194372 20152.32884812355
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f2b1361dc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.4min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
Training time measures: 19898.352854325 19899.869965076447
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1e1756bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
Training time measures: 21759.876433962 21760.96907186508
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=16850),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1484887cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time=265.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.4min
Training time measures: 24719.803333631 40142.10442471504
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_16850
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1010ddfc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
Training time measures: 17140.932830826998 17141.541460752487
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f0799149c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
Training time measures: 19249.928752775 19250.289949178696
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7ff208f87c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
Training time measures: 17555.228024057997 17555.663556098938
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f5bc4b5bcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.6min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
Training time measures: 17101.005123074 17101.2565305233
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f79e8c09c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 7.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 7.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 7.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.2min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
Training time measures: 21928.65858209 21928.85177588463
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f4ec35d0cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
Training time measures: 19001.006058387 19513.967711687088
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f802a54ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time=212.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
Training time measures: 19333.180962062 31407.158124923706
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f2b63e02c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
Training time measures: 18214.369032689 18215.150752305984
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=29910),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f0009228cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=18.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
Training time measures: 19282.369016069002 19282.831572294235
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_29910
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f3907604c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
Training time measures: 20294.428988890002 20294.84668135643
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fbf07604c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 8.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
Training time measures: 18573.009841486997 18578.419039011
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa527d1ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 21169.055144143 21170.13517165184
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f0e08df7cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
Training time measures: 22090.996073319002 22092.422919511795
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f08443f8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 8.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
Training time measures: 19636.824555295 19637.9923722744
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f72b18cecb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
Training time measures: 21115.304675908 21115.546546459198
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f94c9848c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 7.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=18.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.8min
Training time measures: 21645.796641044 21645.972014427185
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9db297cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
Training time measures: 18964.107267564 18964.364510297775
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=4426),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'function_...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa99daebcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.9min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
Training time measures: 18536.195732325 18536.777253627777
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_4426
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f599f911c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.0min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
Training time measures: 20166.972289993 20167.328483104706
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fa7ee3b6c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=18.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 19494.847624272 19495.044809103012
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc1eabbbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 21803.863692001 21805.180884838104
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1068c44cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
Training time measures: 20499.977750675 20501.188822746277
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7faba5b17c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 17504.274191573 17504.41905117035
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f5d5b0dbcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
Training time measures: 21503.904253347 21504.60036277771
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f6a1d48cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.4min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
Training time measures: 20810.108192737 20810.708953857422
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f6a84899c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
Training time measures: 15815.052646859 15815.671488761902
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=21962, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=21962),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fbf084dacb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.8min
Training time measures: 20544.692277362 20545.31146454811
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_21962
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f54c4d13c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.9min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 19888.470177499 19888.956862211227
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f4648299c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.5min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
Training time measures: 18436.582150713002 18436.842561006546
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f82f9171c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
Training time measures: 16977.93135016 16978.28850889206
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f822e278cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
Training time measures: 15978.778268664999 15979.186126708984
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f3c54927c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.6min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
Training time measures: 16748.516832567 16749.110824346542
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f4095b0bcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.8min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
Training time measures: 23952.96444437 23954.278653621674
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9c4fb5ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=18.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=17.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=18.2min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
Training time measures: 22276.544974642 22277.54860329628
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f455519bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.9min
Training time measures: 19376.823706373 19378.054306983948
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=14423, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=14423),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f237e151cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.2min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.0min
Training time measures: 23088.950759737003 23090.095585107803
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_14423
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fc06b2c8c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.7min
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
Training time measures: 16830.3322548 16830.92279458046
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/663_rabe_266//663_rabe_266_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f6214a46c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 3.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=10.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time= 9.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
Training time measures: 18751.451320655 18751.661130189896
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/192_vineyard//192_vineyard_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f9da6fbec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
Training time measures: 21163.955592479 21164.546704530716
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/519_vinnie//519_vinnie_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7ffb3be8bcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.3min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
Training time measures: 18781.610564040002 18782.216665267944
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f1085c86c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 6.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 6.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.0min
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.1min
Training time measures: 19845.146038298 19845.464832544327
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7fd8fc9ebcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.7min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.2min
Training time measures: 21967.993233521 21968.99358701706
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f8151f3cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=15.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.3min
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=14.6min
Training time measures: 24216.613571363 24217.204509735107
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f387cac4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.1min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 7.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 6.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 4.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=12.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=14.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=11.8min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=13.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=10.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=11.7min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=12.2min
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 5.4min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 5.4min
Training time measures: 16940.717425066 16940.87493109703
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/228_elusage//228_elusage_gplearn_28020
import from methods.gplearn
algorithm: SymbolicRegressor(function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt',
                                'sin', 'cos'),
                  generations=500)
hyperparams: [{'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [1000], 'generations': [500], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [500], 'generations': [1000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt')]}, {'population_size': [100], 'generations': [5000], 'function_set': [('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos')]}]
========================================
Evaluating gplearn on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=28020, shuffle=True),
                    error_score=0.0,
                    estimator=SymbolicRegressor(function_set=('add', 'sub',
                                                              'mul', 'div',
                                                              'log', 'sqrt',
                                                              'sin', 'cos'),
                                                generations=500,
                                                random_state=28020),
                    n_jobs=1,
                    param_grid=[{'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [500],
                                 'population_size': [1000]},
                                {'functio...
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [1000],
                                 'population_size': [500]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt')],
                                 'generations': [5000],
                                 'population_size': [100]},
                                {'function_set': [('add', 'sub', 'mul', 'div',
                                                   'log', 'sqrt', 'sin',
                                                   'cos')],
                                 'generations': [5000],
                                 'population_size': [100]}],
                    refit=<function _refit_callable at 0x7f17e555dcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=500, population_size=1000; total time= 4.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=1000, population_size=500; total time= 5.6min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=1000, population_size=500; total time= 5.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.5min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=18.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=17.2min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=5000, population_size=100; total time=15.0min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=13.9min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt'), generations=500, population_size=1000; total time= 4.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
[CV] END function_set=('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos'), generations=5000, population_size=100; total time=16.3min
Training time measures: 22892.924846632 22893.235233545303
WARNING: attempting to store  (-1.0, 1.0) as a str for json
WARNING: attempting to store  ('add', 'sub', 'mul', 'div', 'log', 'sqrt', 'sin', 'cos') as a str for json
WARNING: attempting to store  (2, 6) as a str for json
save_file: ../results_gplearn_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_gplearn_28020
learners: ['gplearn']
dataset directory: ../filtered_black_box_datasets
found 19 datasets
skipped 0 jobs with results. Override with --noskips.
skipped 0 jobs without results. Override with --noskips.
skipped 0 queued jobs. Override with --noskips.
submitting 90 jobs...
Finished submitting 90 jobs.
