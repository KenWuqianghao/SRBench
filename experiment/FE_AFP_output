nohup: ignoring input
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5b2ef57c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   9.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   9.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  10.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  11.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  13.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  16.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  15.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  18.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.9s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
Training time measures: 985.329768578 1386.1580245494843
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selection...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f9ea3106c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.0s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.2s
Training time measures: 909.906873238 1935.3213803768158
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7efc7c2fec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.4s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.9s
Training time measures: 1474.023567489 2423.4378621578217
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f7d945cbcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
Training time measures: 1053.5533212779999 1739.179428100586
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5931fd4c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  13.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.7s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.8s
Training time measures: 1081.276675434 1738.2349691390991
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd833a4fcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.5min
Training time measures: 3079.6269759069996 5502.061764240265
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa341912c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   9.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.7s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.2s
Training time measures: 1201.676621548 1950.2422370910645
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f522a02ec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.8s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.6s
Training time measures: 920.812418527 1526.1293725967407
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=23654, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=23654,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f64c7fefcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
Training time measures: 2371.849542005 4343.861553430557
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_23654
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7ff772becc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.7s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.1s
Training time measures: 945.893646794 1858.131944179535
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selection...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f3d96dcdc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  14.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  13.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  18.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.6s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.1s
Training time measures: 926.999113488 1421.4497270584106
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f7d013a5c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.9s
Training time measures: 1500.585951072 3142.595228910446
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fba3e8dbcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.8s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.9s
Training time measures: 1122.074393029 1898.889757156372
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f26f3d29c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.8s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
Training time measures: 1155.637432895 1941.150442123413
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f911294acb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
Training time measures: 2546.467350451 5763.609927177429
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f2749969c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.5s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
Training time measures: 1234.670882429 2587.8120079040527
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd813161c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.8s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
Training time measures: 904.818451107 1718.9387080669403
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=15795, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=15795,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0350b89cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.6s
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
Training time measures: 2385.349105369 5495.751717805862
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_15795
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f7de2e20c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.8s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.6s
Training time measures: 845.83671635 1648.6004827022552
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='af...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7ff9f9f7cc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.9s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.7s
Training time measures: 893.600066127 1717.1959474086761
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f64149e6c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.2s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
Training time measures: 1537.714104827 3363.7546746730804
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f150fed4cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.4s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  58.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
Training time measures: 1125.498381266 2276.4779114723206
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f6bd0c09c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.3s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
Training time measures: 1125.969292209 2320.5604202747345
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fba76020cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.9min
Training time measures: 2510.437421401 5558.112099885941
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f71cc29fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.6s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
Training time measures: 1125.6123244869998 2373.4057772159576
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f277e0dbc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  60.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.7s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.9s
Training time measures: 965.139220136 1861.0481176376343
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=860, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=860,
                                    selection='a...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f983c547cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 5.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
Training time measures: 2482.006880065 5676.074636459351
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_860
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f23c150bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.7s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.6s
Training time measures: 932.202956833 1828.5552949905396
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection='...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fa42cb37c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.0s
Training time measures: 892.082253404 1659.8235394954681
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fba4c4cec20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  51.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.2s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
Training time measures: 1375.197599565 2989.776868581772
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f52a11c9cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
Training time measures: 1207.7412319969999 2487.156163454056
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f54b19ebc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.9s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
Training time measures: 1209.635486494 2537.2460515499115
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f9a131dacb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 6.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.5min
Training time measures: 2595.995811621 5839.8178651332855
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5c1b29bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.9s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
Training time measures: 1188.346677384 2540.895017385483
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f2ef7650c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  18.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  13.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.2s
Training time measures: 864.6029071380001 1359.695644378662
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=5390, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=5390,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f0582b48cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 8.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
Training time measures: 2616.878354867 6163.0086443424225
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_5390
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f664c381c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  11.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  43.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  13.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  17.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.1s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.9s
Training time measures: 814.877791506 1220.3627698421478
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selection...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7faacde4fc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  21.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  17.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  16.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  22.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  20.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.5s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
Training time measures: 937.3252742880001 1451.8989446163177
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f08be7f1c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  22.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
Training time measures: 1520.345803638 2687.1790137290955
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fdeebb3dcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  11.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  32.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  57.6s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  16.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  10.6s
Training time measures: 1008.740863692 1671.6550464630127
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f684a315c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  23.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.4s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
Training time measures: 1122.11954847 1842.5033602714539
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f33ff3a1cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
Training time measures: 2474.5064155269997 4384.841246366501
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fb10c636c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  13.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  22.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.2s
Training time measures: 1294.041274935 2296.5860273838043
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f338f33bc20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  29.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  54.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  29.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  44.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.6s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  27.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.6s
Training time measures: 931.806371966 1628.2092962265015
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=16850, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=16850,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f342f9c2cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  36.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  50.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.7min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.6min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
Training time measures: 2433.062795455 4571.102212429047
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_16850
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f3ef0200c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=   9.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  12.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  10.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  15.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  24.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  36.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  19.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  25.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  51.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  26.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  16.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.3s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  20.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.5s
Training time measures: 895.0982236550001 1386.5233254432678
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/192_vineyard/192_vineyard.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 975
X_train: (39, 2)
y_train: (39,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=975, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selection...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f048d799c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 39
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  21.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  28.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  43.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  33.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  24.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  25.0s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
Training time measures: 916.557188426 1761.5115501880646
save_file: ../results_FE_AFP_filtered_black_box/192_vineyard//192_vineyard_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/519_vinnie/519_vinnie.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 7125
X_train: (285, 2)
y_train: (285,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=7125, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fe191d7ac20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 95
max_resources_: 285
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 95
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  50.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  19.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  58.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  30.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  54.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  49.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  40.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.8s
----------
iter: 1
n_candidates: 2
n_resources: 285
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  55.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.3s
Training time measures: 1378.22674831 2392.7678327560425
save_file: ../results_FE_AFP_filtered_black_box/519_vinnie//519_vinnie_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/523_analcatdata_neavote/523_analcatdata_neavote.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1875
X_train: (75, 2)
y_train: (75,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1875, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fecc42f8cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 25
max_resources_: 75
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 25
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  40.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  42.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  20.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  11.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  53.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  57.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  55.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  29.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  48.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  19.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  36.2s
----------
iter: 1
n_candidates: 2
n_resources: 75
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  57.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.3s
Training time measures: 1111.7203151620001 1930.5352139472961
save_file: ../results_FE_AFP_filtered_black_box/523_analcatdata_neavote//523_analcatdata_neavote_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/678_visualizing_environmental/678_visualizing_environmental.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2075
X_train: (83, 3)
y_train: (83,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2075, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fd892479c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 27
max_resources_: 83
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 27
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  47.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  45.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  33.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  56.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  39.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  34.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  23.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.6s
----------
iter: 1
n_candidates: 2
n_resources: 81
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  53.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  18.0s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  59.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.6s
Training time measures: 1165.763652027 2049.4334716796875
save_file: ../results_FE_AFP_filtered_black_box/678_visualizing_environmental//678_visualizing_environmental_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/556_analcatdata_apnea2/556_analcatdata_apnea2.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f53a0efdcb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.0min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.8min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.5min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  53.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.9min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 3.7min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.8min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 5.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 4.7min
Training time measures: 2544.6072716639997 5739.118734121323
save_file: ../results_FE_AFP_filtered_black_box/556_analcatdata_apnea2//556_analcatdata_apnea2_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/712_chscase_geyser1/712_chscase_geyser1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 4150
X_train: (166, 2)
y_train: (166,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=4150, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f56c8d70c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 55
max_resources_: 166
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 55
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  24.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  37.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  52.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  50.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  40.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  48.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  44.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  52.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 2.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  37.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.2s
----------
iter: 1
n_candidates: 2
n_resources: 165
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  51.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  59.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  60.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  59.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  58.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
Training time measures: 1256.112550245 2554.415079832077
save_file: ../results_FE_AFP_filtered_black_box/712_chscase_geyser1//712_chscase_geyser1_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/228_elusage/228_elusage.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 1025
X_train: (41, 2)
y_train: (41,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=1025, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7fdae4075c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 13
max_resources_: 41
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 13
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  39.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  56.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  49.1s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  34.9s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.3s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.4s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  44.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  31.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  48.7s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  33.6s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  27.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  26.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.7s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  46.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  37.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  35.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  38.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  31.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  30.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  52.2s
----------
iter: 1
n_candidates: 2
n_resources: 39
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  47.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  38.1s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  45.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  42.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.6s
Training time measures: 926.0909130489999 1750.0942785739899
save_file: ../results_FE_AFP_filtered_black_box/228_elusage//228_elusage_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/557_analcatdata_apnea1/557_analcatdata_apnea1.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 8900
X_train: (356, 3)
y_train: (356,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=29910, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=8900, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=29910,
                                    selectio...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f5e023b6cb0>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 118
max_resources_: 356
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 118
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.6min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.7min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.9min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.5min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  27.5s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.4min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 2.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.9min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.0min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.4min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 2.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.6min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.8min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.1min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.4min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 1.3min
----------
iter: 1
n_candidates: 2
n_resources: 354
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 7.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 4.2min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 3.3min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 6.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.0min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 4.3min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.5min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.2min
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time= 3.3min
Training time measures: 2627.212522327 6011.263106584549
save_file: ../results_FE_AFP_filtered_black_box/557_analcatdata_apnea1//557_analcatdata_apnea1_FE_AFPRegressor_29910
import from methods.FE_AFPRegressor
algorithm: ellyn(EstimateFitness=True, FE_ind_size=10, FE_pop_size=100, FE_rank=True,
      FE_train_gens=10, FE_train_size=10, elitism=True, g=250, islands=False,
      max_len=64, max_len_init=20, num_islands=10, pHC_on=True, popsize=1000,
      prto_arch_on=True, selection='afp', time_limit=7200)
hyperparams: [{'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [100], 'g': [2500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [500], 'g': [500], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt']]}, {'popsize': [1000], 'g': [250], 'op_list': [['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt']]}]
========================================
Evaluating FE_AFPRegressor on 
../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
========================================
compression: gzip
filename: ../filtered_black_box_datasets/663_rabe_266/663_rabe_266.tsv.gz
scaling X
scaling y
FE ellyn gens adjusted from 250 to 2250
X_train: (90, 2)
y_train: (90,)
training HalvingGridSearchCV(cv=KFold(n_splits=5, random_state=4426, shuffle=True),
                    error_score=0.0,
                    estimator=ellyn(EstimateFitness=True, FE_ind_size=10,
                                    FE_pop_size=100, FE_rank=True,
                                    FE_train_gens=10, FE_train_size=10,
                                    elitism=True, g=2250, islands=False,
                                    max_len=64, max_len_init=20, num_islands=10,
                                    pHC_on=True, popsize=1000,
                                    prto_arch_on=True, random_state=4426,
                                    selection=...
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [500]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'sin', 'cos', 'exp', 'log', '2',
                                              '3', 'sqrt']],
                                 'popsize': [1000]},
                                {'g': [250],
                                 'op_list': [['n', 'v', '+', '-', '*', '/',
                                              'exp', 'log', '2', '3', 'sqrt']],
                                 'popsize': [1000]}],
                    refit=<function _refit_callable at 0x7f4b01812c20>,
                    scoring='r2', verbose=2)
n_iterations: 2
n_required_iterations: 2
n_possible_iterations: 2
min_resources_: 30
max_resources_: 90
aggressive_elimination: False
factor: 3
----------
iter: 0
n_candidates: 6
n_resources: 30
Fitting 5 folds for each of 6 candidates, totalling 30 fits
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  17.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  38.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  25.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  46.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  32.6s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  41.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time= 1.1min
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  23.2s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  26.8s
[CV] END g=2500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=100; total time=  35.4s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  30.2s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  42.5s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.2min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  41.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  35.1s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  31.0s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  28.8s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  43.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.9s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  32.6s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  28.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  49.8s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.5s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  55.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  34.3s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.4s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  39.4s
----------
iter: 1
n_candidates: 2
n_resources: 90
Fitting 5 folds for each of 2 candidates, totalling 10 fits
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  54.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  41.7s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  47.2s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  56.0s
[CV] END g=250, op_list=['n', 'v', '+', '-', '*', '/', 'exp', 'log', '2', '3', 'sqrt'], popsize=1000; total time=  46.9s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.3min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time=  45.3s
[CV] END g=500, op_list=['n', 'v', '+', '-', '*', '/', 'sin', 'cos', 'exp', 'log', '2', '3', 'sqrt'], popsize=500; total time= 1.1min
Training time measures: 949.7074511449999 1804.5948240756989
save_file: ../results_FE_AFP_filtered_black_box/663_rabe_266//663_rabe_266_FE_AFPRegressor_4426
